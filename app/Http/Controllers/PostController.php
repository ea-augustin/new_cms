<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Post;
use App\User;
use Illuminate\Support\Facades\Session;


class PostController extends Controller
{
    //


    public function index()
    {
        $posts = auth()->user()->posts()->paginate('5');
        
        return view('admin.posts.index', ['posts' => $posts]);
    }

    /**
     * Create a new controller instance.
     *
     * @return void
     */

    // public function __construct()
    // {
    //     $this->middleware('auth');
    // }

    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    //Route model binding
    public function show(Post $post)
    {
        return view('blog-post', ['post' => $post]);
    }


    /**
     * create the application dashboard.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    //Route model binding
    public function create(Post $post)
    {
        $this->authorize('create',Post::class);
        return view('admin.posts.create');
    }

    ///Create
    public function store(Post $post)
    {   
        $this->authorize('create',Post::class);
        //prevent empty data from being sent
        $inputs = request()->validate([
            'title' => 'required|min:8|max:255',
            'post_image' => 'file',
            'body' => 'required'
        ]);

        if (request('post_image')) {

            $inputs['post_image'] = request('post_image')->store('images');
        }
        auth()->user()->posts()->create($inputs);

        session()->flash('post-created-message', 'Post:' . $inputs['title']);
        return redirect()->route('post.index');
    }

    //Update

    public function edit(Post $post){
        $this->authorize('view',$post);

       
        return view('admin.posts.edit', ['post'=>$post]);

    }

    public function update(Post $post, Request $request){
        //prevent empty data from being sent
        $inputs = request()->validate([
            'title' => 'required|min:8|max:255',
            'post_image' => 'file',
            'body' => 'required'
        ]);

        if (request('post_image')) {
            $inputs['post_image'] = request('post_image')->store('images');
            $post->post_image = $inputs['post_image'];
        }

       $post->title = $inputs['title'];
       $post->body = $inputs['body'];
       //Authorize
       $this->authorize('update',$post);

       auth()->user()->posts()->save($post);
       $request->session()->flash('post-updated-message', 'Post was updated');
       return redirect()->route('post.index');

    }

    

    /////Delete
    public function destroy(Post $post, Request $request)
    {  

        $this->authorize('delete',$post);

        $post->delete();

        $request->session()->flash('message', 'Post was deleted');

        return redirect()->route('post.index');
    }
    public function posts($method, $parameters)
    {
        parent::__call($method, $parameters); // TODO: Change the autogenerated stub
    }
}
